[init]
  defaultBranch = master
  templateDir = ~/.git-config/git-template

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true

  [diff-highlight]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

  [diff]
    meta = 11
    frag = magenta bold
    func = 146 bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

[push]
    default = simple
    autoSetupRemote = true

[core]
    excludesfile = ~/.git-config/gitignore_global
    # editor = vim --noplugin
    editor = nvim
    page = delta
    pager = diff-so-fancy | less --tabs=4 --no-init --RAW-CONTROL-CHARS
    fscache = false

# Need to install git-delta for this: https://dandavison.github.io/delta/installation.html
[interactive]
    # diffFilter = delta --color-only
    diffFilter = diff-so-fancy --patch

[delta]
    navigate = true  # use n and N to move between diff sections
    side-by-side = true
    line-numbers = true

[merge]
    conflictstyle = diff3

[diff]
    colorMoved = default

[diff "sopsdiffer"]
    textconv = "sops -d"

[commit]
    gpgsign = true
    template = ~/.git-config/commit-message.txt

[alias]
    # List the aliases
    aliases = config --get-regexp '^alias.*'

    # Well, I'm guilty of typing this a lot
    pyll = pull

    # syn the current branch with the remote
    sync = !git fetch --tags --progress --prune --prune-tags && git pull --ff --tags --progress --prune

    # Remove merged branches (except for current branch, master, main and develop)
    clean-merged = !git branch --merged | egrep -v '(^\\*|master|main|develop)' | xargs -r git branch -d
    clean-removed-from-remote = "!gcrfr() { for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == \"[gone]\" {sub(\"refs/heads/\", \"\", $1); print $1}'); do git branch -D $branch; done }; gcrfr"

    # Unstage anything that was added
    unstage = reset HEAD --

    # Un-commit the last commit
    uncommit = reset --soft HEAD~

    # Remove a file/folder from git history
    forget = rm -r --cached

    # Create an empty commit, useful sometimes to change the commit hash without force pushing
    empty-commit = "commit --allow-empty --no-verify --message=\"empty commit\""

    # Recreate the last commit
    recommit = commit --amend --reset-author --no-edit

    # YOLO ðŸŽ‰
    yolo = !git commit -m \"feat: $(curl -s whatthecommit.com/index.txt)\"

    # View only the last commit
    last = log -1 HEAD

    # Log with lots of details
    log-details = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    # One line log with iso date
    log-iso = log --graph --pretty='%C(red)%h%C(reset) -%C(auto)%d%C(reset) %s %C(green)(%ad) %C(bold blue)<%an>%C(reset)' --date=iso

    # Squash all commits: git squash-all -m "a brand new start"
    squash-all = "!f(){ git reset $(git commit-tree \"HEAD^{tree}\" \"$@\");};f"

    # Look for a string in the code, and its authors
    grep-blame = "!ggb() { git grep -n \"$1\" | while IFS=: read -r filename line content; do git blame --show-name -L \"${line},+1\" -- \"${filename}\" | cat; done }; ggb"
    # Search for all TODOs in the code
    todos = grep-blame "TODO"
    # Search for my TODOs in the code
    my-todos = !git todos | grep -i jacem

    # Difftastic aliases, so `git dlog` is `git log` with difftastic and so on.
    dlog = -c diff.external=difft log --ext-diff
    dshow = -c diff.external=difft show --ext-diff
    ddiff = -c diff.external=difft diff

[pager]
    stash = false

[log]
    date = format:%Y-%m-%d %H:%M:%S # other values: relative / iso

[format]
    pretty = format:%h %C(blue)%ad%C(reset) %ae %C(green)%s%C(reset)

[rebase]
    autoStash = true

[credential]
    helper = store

[gpg]
    program = gpg

[url "ssh://git@github.com"]
  insteadOf = https://github.com

[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
